// utils/voucherGenerator.js
import RNHTMLtoPDF from 'react-native-html-to-pdf';
import RNFS from 'react-native-fs';
import { Platform, PermissionsAndroid, ToastAndroid, Alert } from 'react-native';


const downloadImageAsBase64 = async (imageUrl, expenseId) => {
  if (!imageUrl) return null;
  try {
    const destPath = `${RNFS.CachesDirectoryPath}/receipt_${expenseId}.jpg`;
    await RNFS.downloadFile({ fromUrl: imageUrl, toFile: destPath }).promise;
    const base64 = await RNFS.readFile(destPath, 'base64');
    return `data:image/jpeg;base64,${base64}`;
  } catch (err) {
    console.warn('Could not download image for PDF:', err);
    return null;
  }
};

export const createVoucherHtml = (expense, receiptDataUri, voucherId) => {
  const formatDate = (dateStr) => {
    if (!dateStr) return '-';
    const d = new Date(dateStr);
    return `${d.getDate().toString().padStart(2, '0')}-${d.toLocaleString('en-US', { month: 'short' })}-${d.getFullYear()}`;
  };

  return `
  <!doctype html>
  <html>
  <head>
    <meta charset="utf-8" />
    <style>
      body { font-family: Arial, sans-serif; background: #f5f5f5; padding: 10px; }
      .card { background: white; border-radius: 12px; padding: 16px; }
      .brand { font-weight: bold; color: #5312A6; font-size: 20px; margin-bottom: 2px; }
      .subtitle { font-size: 14px; color: #666; margin-bottom: 10px; }
      .row { display:flex; justify-content:space-between; padding: 6px 0; }
      .label { color:#555; font-weight:600; }
      .value { color:#000; font-weight:700; }
      .divider { height:1px; background:#ddd; margin:10px 0; }
      .sectionTitle { font-weight:bold; margin-bottom:4px; }
      .footer { font-size:12px; color:#777; text-align:center; margin-top:10px; }
      img.receipt { max-width:100%; height:auto; border-radius:6px; margin-top:10px; }
    </style>
  </head>
  <body>
    <div class="card">
      <div class="brand">Tidy Digital Solution Pvt</div>
      <div class="subtitle">${voucherId}</div>
      <div class="divider"></div>

      <div class="row"><div class="label">Expense ID</div><div class="value">${expense.expenseId || '-'}</div></div>
      <div class="row"><div class="label">Name</div><div class="value">${expense.name || '-'}</div></div>
      <div class="row"><div class="label">Invoice</div><div class="value">${expense.invoice || '-'}</div></div>
      <div class="row"><div class="label">Amount</div><div class="value">₹${expense.amount || '0'}</div></div>
      <div class="row"><div class="label">Category</div><div class="value">${expense.category || '-'}</div></div>
      <div class="row"><div class="label">Date</div><div class="value">${formatDate(expense.date)}</div></div>
      <div class="row"><div class="label">GST</div><div class="value">${expense.gst || '-'}</div></div>
      <div class="row"><div class="label">Status</div><div class="value">${expense.status || '-'}</div></div>

      <div class="divider"></div>
      <div class="sectionTitle">Description</div>
      <div>${expense.description || '-'}</div>

      ${ receiptDataUri ? `<div><strong>Receipt</strong><img class="receipt" src="${receiptDataUri}" /></div>` : '' }

      <div class="divider"></div>
      <div class="footer">Generated by Tidy Expense Tracker — ${new Date().toLocaleString()}</div>
    </div>
  </body>
  </html>
  `;
};


export const GenerateVoucherPDF = async (expense, { showLoader, hideLoader }) => {
  try {
    showLoader?.();

    const expenseNum = String(expense.expenseId || '').replace(/\D/g, '');
    const shortId = expenseNum.substring(0, 2).padStart(2, '0');
    const voucherId = `E-voucher-${shortId}`;

    if (Platform.OS === 'android' && Platform.Version <= 29) {
      const granted = await PermissionsAndroid.request(
        PermissionsAndroid.PERMISSIONS.WRITE_EXTERNAL_STORAGE
      );
      if (granted !== PermissionsAndroid.RESULTS.GRANTED) {
        hideLoader?.();
        ToastAndroid.show('Storage permission denied', ToastAndroid.SHORT);
        return;
      }
    }

    const receiptDataUri = expense.imageUrl
      ? await downloadImageAsBase64(expense.imageUrl, expense.expenseId)
      : null;

    const html = createVoucherHtml(expense, receiptDataUri, voucherId);

    const options = {
      html,
      fileName: voucherId,
      directory: Platform.OS === 'android' ? 'Download' : '',
    };
    const pdf = await RNHTMLtoPDF.convert(options);

    hideLoader?.();

    if (Platform.OS === 'android') {
      ToastAndroid.show(`Voucher saved to Downloads: ${pdf.filePath}`, ToastAndroid.LONG);
    } else {
      Alert.alert('Saved', `Voucher saved to: ${pdf.filePath}`);
    }

    console.log('PDF generated at:', pdf.filePath);
    return pdf.filePath;

  } catch (err) {
    hideLoader?.();
    console.error('Error generating voucher:', err);
    Alert.alert('Error', 'Failed to generate voucher');
  }
};
